"0",""
"0","filenames <- list.files(path=datapath, pattern=""+.*csv"")"
"0","names2use <- sub("".csv"", """", filenames)"
"0",""
"0","for(i in names2use){"
"0","    "
"0","    datafilepath <- file.path(datapath, paste(i,"".csv"",sep=""""))"
"0","    "
"0","    assign(i, "
"0","           read.csv(datafilepath, "
"0","                    header = TRUE, "
"0","                    na.strings = ""NaN"", "
"0","                    sep = "",""))"
"0","}"
"0",""
"0","# read pheno data file"
"0","phenofilename <- file.path(datapath, "
"0","                           ""pheno"", "
"0","                           ""AIMSNeuroPsychData.csv"")"
"0","pheno_data <- read.csv(phenofilename, "
"0","                       header = TRUE,                     "
"0","                       na.strings = ""NaN"", "
"0","                       sep = "";"")"
"0",""
"0","# read similarity matrices "
"0","filenames <- list.files(path=resultpath, pattern=""+.*csv"")"
"0",""
"0","for(i in filenames){"
"0","  "
"0","    datafilepath <- file.path(resultpath, i)"
"0","    name2use <- sub("".csv"", """", i)"
"0","    "
"0","    assign(name2use, "
"0","           read.csv(datafilepath, "
"0","                    header = TRUE, "
"0","                    na.strings = ""NaN"", "
"0","                    sep = "","","
"0","                    row.names = 1))"
"0","}"
"0",""
"0","name2use <- 0"
"0",""
"0","for (i in 1:length(filenames)) {"
"0","  name = filenames[i]"
"0","  if (grepl(""INTRA"", name)){"
"0","  name2use[i] <- sub("".csv"", """", filenames[i])"
"0","}}"
"0",""
"0","name2use <- Filter(function(a) any(!is.na(a)), name2use)"
"0",""
"0","# get list of similarity matrices to loop through"
"0",""
"0","sim2loopthrough <- do.call(""list"", mget(name2use))"
"0",""
"0","for (i in 1:length(sim2loopthrough)){"
"0","  colnames(sim2loopthrough[[i]]) <- rownames(sim2loopthrough[[i]])"
"0","  value <- isSymmetric(data.matrix(sim2loopthrough[[i]]))"
"0","  message <- ""Is my matrix symmetric?"""
"0","  print(paste0(message, "" "", value))"
"0","  }"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"1","[1]"
"1"," ""Is my matrix symmetric? TRUE"""
"1","
"
"0","raw_data_transcript <- merge(raw_data_transcript, "
"0","                             all_layers_video6, "
"0","                             by = intersect(names(raw_data_transcript),"
"0","                                            names(all_layers_video6)))"
"0",""
"0","#set seed"
"0","set.seed(999)"
"0",""
"0","#set permutation runs for mantel test"
"0","nperm = 10000"
"0","#nperm = 10 # for testing purposes"
"0",""
"0","#n of AQ similarity models we will build"
"0","n_behave_models = 3"
